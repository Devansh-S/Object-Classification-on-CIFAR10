# -*- coding: utf-8 -*-
"""Object_Recognition_(Jupyter_Notebook)(2)(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xVDuqzHZIA8W9Y2VE_cy0q3Kdfz-Po3t
"""

from keras.datasets import cifar10
from keras.utils import np_utils
from matplotlib import pyplot as plt
import numpy as np
from PIL import Image

(X_train, y_train), (X_test, y_test) = cifar10.load_data()

print('Training Images: {}'.format(X_train.shape))
print('Testing Images: {}'.format(X_test.shape))
print(X_train[0].shape)

for i in range(0,9):
    plt.subplot(330 + 1 + i)
    img = X_train[i]
    plt.imshow(img)
plt.show()

seed = 6
np.random.seed(seed) 
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train = X_train / 255.0
X_test = X_test / 255.0
print(y_train.shape)
print(y_train[0])

"""The class labels are a single integer value (0-9).  What we really want is a one-hot vector of length ten.  For example, the class label of 6 should be denoted [0, 0, 0, 0, 0, 0, 1, 0, 0, 0].  We can accomplish this using the np_utils.to_categorical() function."""

Y_train = np_utils.to_categorical(y_train)
Y_test = np_utils.to_categorical(y_test)
num_classes = Y_test.shape[1]

print(Y_train.shape)
print(Y_train[0])

from keras.models import Sequential
from keras.layers import Dropout, Activation, Conv2D, GlobalAveragePooling2D,MaxPooling2D,BatchNormalization
from keras.optimizers import Adam,SGD

def cnnmodel(weights=None):
    model = Sequential()

    act1 = 'relu'

    model.add(Conv2D(96, (3, 3), padding = 'same', input_shape=(32, 32, 3)))
    model.add(Activation(act1))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))

    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

    model.add(Conv2D(384, (3, 3), padding = 'same'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))            
    
    model.add(Conv2D(384, (3, 3), padding = 'same'))
    model.add(Activation(act1))        
    model.add(Dropout(0.2))    
    
    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))    
    
    model.add(Conv2D(196, (1, 1), padding = 'valid'))
    model.add(Activation(act1))
    model.add(Dropout(0.2))

    model.add(Conv2D(10, (1, 1), padding = 'valid'))
    
    model.add(GlobalAveragePooling2D())
    model.add(Activation('softmax'))
    
    if weights:
        model.load_weights(weights)
    
    return model

# Importing model layers and dependencies


def custom_model(weights=None):
    
    model = Sequential()
    
    model.add(Conv2D(96, (4, 4), padding = 'same', input_shape=(32, 32, 3)))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(96, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))

    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))            
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))        
    
    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    
    
    model.add(Conv2D(96, (2, 2), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(96, (1, 1), padding = 'valid'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))
    
    model.add(Conv2D(10, (1, 1), padding = 'valid'))
    
    model.add(GlobalAveragePooling2D())
    model.add(Activation('softmax'))
    
    if weights:
        model.load_weights(weights)
    
    return model

# define hyper parameters
learning_rate = 0.0001
weight_decay =  0.00001
momentum = 0.85

# build model 
#model = cnnmodel()
model = custom_model()
# define optimizer and compile model
opt = Adam(lr=learning_rate, decay=weight_decay)#, momentum=momentum)
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])

# print model summary
print (model.summary())

# define additional training parameters
epochs = 50
batch_size = 16

# fit the model
#model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=epochs, batch_size=batch_size, verbose = 1)


import keras
from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
  featurewise_center=False,  # set input mean to 0 over the dataset
  samplewise_center=False,  # set each sample mean to 0
  featurewise_std_normalization=False,  # divide inputs by std of the dataset
  samplewise_std_normalization=False,  # divide each input by its std
  zca_whitening=False,  # apply ZCA whitening
  rotation_range=35,  # randomly rotate images in the range (degrees, 0 to 180)
  width_shift_range=0.20,  # randomly shift images horizontally (fraction of total width)
  height_shift_range=0.20,  # randomly shift images vertically (fraction of total height)
  horizontal_flip=True,  # randomly flip images
  vertical_flip=False)  # randomly flip images


datagen.fit(X_train)
#model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
#tbCallBack = keras.callbacks.TensorBoard(log_dir='./Graph2', histogram_freq=0, write_graph=True, write_images=True)
  # Fit the model on the batches generated by datagen.flow().
model.fit(datagen.flow(X_train,Y_train,
                                 batch_size=batch_size),
                                 epochs=epochs,
                                 steps_per_epoch=X_train.shape[0] // batch_size,
                                 validation_data=(X_test, Y_test))

model.save("del.h5")

# define hyper parameters
learning_rate = 0.0001
weight_decay =  0.000001
momentum = 0.85

# build model 
# model = cnnmodel(weights="weights (2).h5")
# model = cnn()
# define optimizer and compile model
opt = SGD(lr=learning_rate, decay=weight_decay)
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])

# print model summary
print (model.summary())

# define additional training parameters
epochs = 200
batch_size = 32

# fit the model
#model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=epochs, batch_size=batch_size, verbose = 1)


import keras
from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
  featurewise_center=False,  # set input mean to 0 over the dataset
  samplewise_center=False,  # set each sample mean to 0
  featurewise_std_normalization=False,  # divide inputs by std of the dataset
  samplewise_std_normalization=False,  # divide each input by its std
  zca_whitening=False,  # apply ZCA whitening
  rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)
  width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
  height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
  horizontal_flip=True,  # randomly flip images
  vertical_flip=False)  # randomly flip images


datagen.fit(X_train)
#model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
#tbCallBack = keras.callbacks.TensorBoard(log_dir='./Graph2', histogram_freq=0, write_graph=True, write_images=True)
  # Fit the model on the batches generated by datagen.flow().
model.fit(datagen.flow(X_train,Y_train,
                                 batch_size=batch_size),
                                 epochs=epochs,
                                 steps_per_epoch=X_train.shape[0] // batch_size,
                                 validation_data=(X_test, Y_test))

import keras
from keras.models import Sequential
from keras.utils import np_utils
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras.datasets import cifar10
from keras import regularizers, optimizers
import numpy as np


(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

#z-score
mean = np.mean(x_train,axis=(0,1,2,3))
std = np.std(x_train,axis=(0,1,2,3))
x_train = (x_train-mean)/(std+1e-7)
x_test = (x_test-mean)/(std+1e-7)

num_classes = 10
y_train = np_utils.to_categorical(y_train,num_classes)
y_test = np_utils.to_categorical(y_test,num_classes)

weight_decay = 1e-4

model = Sequential()
    
model.add(Conv2D(96, (3, 3), padding = 'same', input_shape=(32, 32, 3)))
model.add(Activation('relu'))

model.add(Conv2D(192, (3, 3), padding = 'same'))
model.add(Activation('relu'))

model.add(Conv2D(192, (3, 3), padding = 'same'))
model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

model.add(Conv2D(384, (3, 3), padding = 'same'))
model.add(Activation('relu'))
model.add(Dropout(0.5))            

model.add(Conv2D(384, (3, 3), padding = 'same'))
model.add(Activation('relu'))        
model.add(Dropout(0.5))    

model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

model.add(Conv2D(192, (3, 3), padding = 'same'))
model.add(Activation('relu'))

model.add(Conv2D(192, (3, 3), padding = 'same'))
model.add(Activation('relu'))
model.add(Dropout(0.3))    

model.add(Conv2D(196, (1, 1), padding = 'valid'))
model.add(Activation('relu'))

model.add(Conv2D(10, (1, 1), padding = 'valid'))

model.add(GlobalAveragePooling2D())
model.add(Activation('softmax'))


model.summary()

model.load_weights("OB_model.h5")

#data augmentation
datagen = ImageDataGenerator(
    featurewise_center=False,
    samplewise_center=False,
    featurewise_std_normalization=False,
    samplewise_std_normalization=False,
    zca_whitening=False,
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True,
    vertical_flip=False
    )
datagen.fit(x_train)

#training
batch_size = 256
epochs=25

opt_rms = keras.optimizers.SGD(lr=0.0001,decay=1e-6)
model.compile(loss='categorical_crossentropy',
        optimizer=opt_rms,
        metrics=['accuracy'])
model.fit(datagen.flow(x_train, y_train, batch_size=batch_size),steps_per_epoch=x_train.shape[0] // batch_size,epochs=3*epochs,verbose=1,validation_data=(x_test,y_test))
model.save_weights('cifar10_normal_rms_ep75.h5')

# Importing model layers and dependencies


def custom_model(weights=None):
    
    model = Sequential()
    
    model.add(Conv2D(96, (3, 3), padding = 'same', input_shape=(32, 32, 3)))
    model.add(Activation('relu'))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))

    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

    model.add(Conv2D(384, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))            
    
    model.add(Conv2D(384, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    model.add(Dropout(0.2))        
    
    model.add(MaxPooling2D(pool_size=(3,3),strides=2,padding='valid'))    

    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    
    model.add(Conv2D(192, (3, 3), padding = 'same'))
    model.add(Activation('relu'))
    
    model.add(Conv2D(196, (1, 1), padding = 'valid'))
    model.add(Activation('relu'))
    
    model.add(Conv2D(10, (1, 1), padding = 'valid'))
    
    model.add(GlobalAveragePooling2D())
    model.add(Activation('softmax'))
    
    if weights:
        model.load_weights(weights)
    
    return model

model = custom_model()
#model = custom_model("w53.h5")

learning_rate = 0.00001
weight_decay =  0.1
momentum = 0.85
epochs = 100
batch_size = 16
 

# define optimizer and compile model
opt = SGD(lr=learning_rate, decay=weight_decay, momentum=momentum)
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])


# fit the model
#model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=epochs, batch_size=batch_size, verbose = 1)


import keras
from keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator( rotation_range=15,  # randomly rotate images in the range (degrees, 0 to 180)
                              width_shift_range=0.15,  # randomly shift images horizontally (fraction of total width)
                              height_shift_range=0.15,  # randomly shift images vertically (fraction of total height)
                              horizontal_flip = True ) # randomly flip images


datagen.fit(X_train)
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
print(model.summary())
#tbCallBack = keras.callbacks.TensorBoard(log_dir='./Graph2', histogram_freq=0, write_graph=True, write_images=True)
  # Fit the model on the batches generated by datagen.flow().
model.fit(datagen.flow(X_train,Y_train,
                                 batch_size=batch_size),
                                 epochs=epochs,
                                 steps_per_epoch=X_train.shape[0] // batch_size,
                                 validation_data=(X_test, Y_test))

from google.colab import drive
drive.mount('/content/drive')

!cp /content/OB_model.h5 drive/MyDrive

!cp /content/drive/MyDrive/OB_model.h5 /content/OB_model.h5

model.save_weights('w5.h5')

from google.colab import files
model.save('OB_model.hdf5')
files.download("OB_model.hdf5")

# test the model with pretrained weights
scores = model.evaluate(X_test, Y_test, verbose=1)
print("Accuracy: %.2f%%" % (scores[1]*100))

from keras.models import load_model
from google.colab import files
#model.save('OB_model.hdf5')
#files.download("OB_model.hdf5")
files.upload()
model = load_model('OB_model1.h5')

# make dictionary of class labels and names
classes = range(0,10)

names = ['airplane',
        'automobile',
        'bird',
        'cat',
        'deer',
        'dog',
        'frog',
        'horse',
        'ship',
        'truck']

# zip the names and classes to make a dictionary of class_labels
class_labels = dict(zip(classes, names))

# generate batch of 9 images to predict
batch = X_test[100:109]
labels = np.argmax(Y_test[100:109],axis=-1)

# make predictions
predictions = model.predict(batch, verbose = 1)

# these are individual class probabilities, should sum to 1.0 (100%)
for image in predictions:
    print(np.sum(image))

# use np.argmax() to convert class probabilities to class labels
class_result = np.argmax(predictions,axis=-1)
print (class_result)

fig, axs = plt.subplots(3, 3, figsize = (15, 6))
fig.subplots_adjust(hspace = 1)
axs = axs.flatten()

for i, img in enumerate(batch):

    for key, value in class_labels.items():
        if class_result[i] == key:
            title = 'Prediction: {}\nActual: {}'.format(class_labels[key], class_labels[labels[i]])
            axs[i].set_title(title)
            axs[i].axes.get_xaxis().set_visible(False)
            axs[i].axes.get_yaxis().set_visible(False)
    axs[i].imshow(img)
plt.show()

